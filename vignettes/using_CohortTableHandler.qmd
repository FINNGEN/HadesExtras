---
title: "Using CohortTableHandler"
vignette: >
  %\VignetteIndexEntry{Using CohortTableHandler}
  %\VignetteEncoding{UTF-8}
  %\VignetteEngine{quarto::html}
editor_options: 
  chunk_output_type: console
---

```{r, include = FALSE}
knitr::opts_chunk$set(
    collapse = TRUE,
    comment = "#>"
)
```

```{r setup}
library(HadesExtras)
# options("DEBUG_DATABASECONNECTOR_DBPLYR" = FALSE)
```

# Intro

The CohortTableHandler is an extension of `CDMHandled` (see vignette) to include the a `cohort` table and the functions to work with this table. 

# Getting an Eunomia database for testing

A testing database can be downloaded from Eunomia. See [Eunomia](https://ohdsi.github.io/Eunomia/reference/getDatabaseFile.html) for more details.
```{r}
# Set EUNOMIA_DATA_FOLDER if not already set
if (Sys.getenv("EUNOMIA_DATA_FOLDER") == "") {
    Sys.setenv(EUNOMIA_DATA_FOLDER = tempdir())
}

# Get the path to the Eunomia database
pathToGiBleedEunomiaSqlite <- Eunomia::getDatabaseFile("GiBleed", overwrite = FALSE)
```

# Configuration 

In addition to the configuration for `CDMHandled`, we also need the configuration indicating the location of the cohort table. 

We need the following configuration. We write this in yaml format for clarity. 

```{r}
config_yaml <- "
  database:
    databaseId: E1
    databaseName: GiBleed
    databaseDescription: Eunomia database GiBleed
  connection:
    connectionDetailsSettings:
        dbms: sqlite
        server: <pathToGiBleedEunomiaSqlite>
  cdm:
    cdmDatabaseSchema: main
    vocabularyDatabaseSchema: main
  cohortTable:
    cohortDatabaseSchema: main
    cohortTableName: test_cohort_table
"

pathToConfigYaml <- file.path(tempdir(), "config.yml")
writeLines(config_yaml, pathToConfigYaml)
```

```{r}
config <- readAndParseYaml(pathToConfigYaml, pathToGiBleedEunomiaSqlite = pathToGiBleedEunomiaSqlite)
```

# Create CohortTableHandler

As in `CDMHandled`, to create a `CohortTableHandles`, for convenience `createCohortTableHandlerFromList` can be used. 
```{r}
cohortTableHandler <- createCohortTableHandlerFromList(config)
```

In addition to the checks performed by `CDMHandled`, `cohortTableHandler` includes a check on the creation of the `cohort` table. 

```{r}
cohortTableHandler$connectionStatusLog |>
    reactable_connectionStatus()
```


# Add cohors to `cohort` table 

To add cohort to the `cohortTableHandler` object we need a `cohortDefinitionSet` table (this table is defined in [CohortGenerator](https://ohdsi.github.io/CohortGenerator/articles/GeneratingCohorts.html#downloading-cohorts-from-atlas)). 

`cohortDefinitionSet` can be created from
[Atlas](https://ohdsi.github.io/CohortGenerator/articles/GeneratingCohorts.html#downloading-cohorts-from-atlas) 
cohort definitions, or from 
[study pacakages](https://ohdsi.github.io/CohortGenerator/reference/getCohortDefinitionSet.html). 

Additionally, `HadesExtras` includes a way to produce `cohortDefinitionSet` based on a list of local person ids (OMOP table person field person_source_value). 

## Add cohorts from Atlas

Get `cohortDefinitionSet` form 3 cohort definitions in Atlas demo. 
```{r, eval=FALSE}
# webAPI url for the Atlas demo
baseUrl <- "https://api.ohdsi.org/WebAPI"
# A list of cohort IDs for use in this vignette
cohortIds <- c(1778211, 1778212, 1778213)
# Get the SQL/JSON for the cohorts
cohortDefinitionSet <- ROhdsiWebApi::exportCohortDefinitionSet(
    baseUrl = baseUrl,
    cohortIds = cohortIds
)
```

```{r}
cohortDefinitionSet <- CohortGenerator::getCohortDefinitionSet(
    settingsFileName = here::here("inst/testdata/atlasCohortsSaved/Cohorts.csv"),
    jsonFolder = here::here("inst/testdata/atlasCohortsSaved/cohorts"),
    sqlFolder = here::here("inst/testdata/atlasCohortsSaved/sql/sql_server"),
    cohortFileNameFormat = "%s",
    cohortFileNameValue = c("cohortId"),
    # packageName = "HadesExtras",
    verbose = FALSE
)
```


Build cohorts 
```{r}
cohortTableHandler$insertOrUpdateCohorts(cohortDefinitionSet)
```

Check cohort counts 
```{r}
cohortTableHandler$getCohortCounts()
```

```{r}
cohortsSummary <- cohortTableHandler$getCohortsSummary()
```

```{r}
rectable_cohortsSummary(cohortsSummary)
```

Check Cohorts Overlap
```{r}
cohortTableHandler$getCohortsOverlap()
```

## Add cohorts from cohortData file

Create tibble of `cohortData` format. See the documentation for the correct format. 

```{r}
cohortData <- tibble::tribble(
    ~cohort_name, ~person_source_value, ~cohort_start_date, ~cohort_end_date,
    "Cohort A", "000728a7-80de-420a-9286-2c20e81cb7b8", as.Date("2020-01-01"), as.Date("2020-01-03"),
    "Cohort A", "000cb58f-523d-49a2-a05e-de1e93f35c01", as.Date("2020-01-01"), as.Date("2020-01-03"),
    "Cohort A", "001f4a87-70d0-435c-a4b9-1425f6928d33", as.Date("2020-01-01"), as.Date("2020-01-03"),
    "Cohort A", "002805e7-7624-4cb7-b68d-e8ac92f61ff9", as.Date("2020-01-01"), as.Date("2020-01-03"),
    "Cohort A", "0030eb48-316c-4250-907f-a272909ff8b9", as.Date("2020-01-01"), as.Date("2020-01-03"),
    "Cohort B", "00093765-abef-4a56-9280-8f92422afae7", as.Date("2020-01-01"), as.Date("2020-01-04"),
    "Cohort B", "00196a95-1567-41f8-b608-18e6295b4c1e", as.Date("2020-01-01"), as.Date("2020-01-04"),
    "Cohort B", "00211cd2-f171-45d9-a7c6-ea8ac6d28d09", as.Date("2020-01-01"), as.Date("2020-01-04"),
    "Cohort B", "0029df47-1263-4576-8ca3-4615adb7dd7a", as.Date("2020-01-01"), as.Date("2020-01-04"),
    "Cohort B", "00444703-f2c9-45c9-a247-f6317a43a929", as.Date("2020-01-01"), as.Date("2020-01-04")
)
```

We can check if the format is correct using `checkCohortData`. See the documentation for the checks

If correct, It will return TRUE. 
```{r}
checkCohortData(cohortData)
```

If any error, It will return an array of strings with the errors detected.  
```{r}
cohortDataWithErrors <- cohortData
cohortDataWithErrors[1, 1] <- as.character(NA)
cohortDataWithErrors[1, 3] <- as.Date("2030-01-01")
checkCohortData(cohortDataWithErrors)
```


To copy the `cohortData` into the `cohort`it has to be converted to a `cohortDefinitionSet`.  


```{r}
cohortDefinitionSet <- cohortDataToCohortDefinitionSet(
    cohortData = cohortData
)
```


Copy `cohortDefinitionSet` to `cohort` table 

```{r}
cohortTableHandler$insertOrUpdateCohorts(cohortDefinitionSet)
```


```{r}
cohortsSummary <- cohortTableHandler$getCohortsSummary()
```

```{r}
rectable_cohortsSummary(cohortsSummary)
```





