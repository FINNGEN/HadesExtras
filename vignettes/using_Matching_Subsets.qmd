---
title: "Using Matching Subset"
vignette: >
  %\VignetteIndexEntry{Using Matching Subset}
  %\VignetteEncoding{UTF-8}
  %\VignetteEngine{quarto::html}
editor_options: 
  chunk_output_type: console
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

```{r setup}
library(HadesExtras)
#devtools::load_all(".")
#options("DEBUG_DATABASECONNECTOR_DBPLYR" = FALSE)
```

# Intro

The CohortTableHandler is an extension of `CDMHandled` (see vignette) to include the a `cohort` table and the functions to work with this table.

# Getting an Eunomia database for testing

A testing database can be downloaded from Eunomia. See [Eunomia](https://ohdsi.github.io/Eunomia/reference/getDatabaseFile.html) for more details.

```{r}  
# Set EUNOMIA_DATA_FOLDER if not already set
if (Sys.getenv("EUNOMIA_DATA_FOLDER") == "") {
    Sys.setenv(EUNOMIA_DATA_FOLDER = tempdir())
}

# Get the path to the Eunomia database
pathToGiBleedEunomiaSqlite <- Eunomia::getDatabaseFile("GiBleed", overwrite = FALSE)
```


# Configuration 

Create a `CohortTableHandles` with a test cohort. 

```{r}
config_yaml <- "
  database:
    databaseId: E1
    databaseName: GiBleed
    databaseDescription: Eunomia database GiBleed
  connection:
    connectionDetailsSettings:
        dbms: sqlite
        server: <pathToGiBleedEunomiaSqlite>
  cdm:
    cdmDatabaseSchema: main
    vocabularyDatabaseSchema: main
  cohortTable:
    cohortDatabaseSchema: main
    cohortTableName: test_cohort_table
"
pathToConfigYaml <- file.path(tempdir(), "config.yml")
writeLines(config_yaml, pathToConfigYaml)
```

```{r}
config <- readAndParseYaml(pathToConfigYaml, pathToGiBleedEunomiaSqlite = pathToGiBleedEunomiaSqlite)
```
     
# Create CohortTableHandler

As in `CDMHandled`, to create a `CohortTableHandles`, for convenience `createCohortTableHandlerFromList` can be used. 
```{r}
cohortTableHandler <- createCohortTableHandlerFromList(config)
```

In addition to the checks performed by `CDMHandled`, `cohortTableHandler` includes a check on the creation of the `cohort` table. 

```{r}
cohortTableHandler$connectionStatusLog |> 
  reactable_connectionStatus()
```

```{r}

# cohort 10:
# 1 M born in 1970
# 1 F born in 1971
#
# cohort 20:
# 10 M born in 1970
# 10 F born in 1970
# 10 F born in 1971
# 10 F born in 1972

cohortDefinitionSet <- CohortGenerator::getCohortDefinitionSet(
  settingsFileName = here::here("inst/testdata/matching/Cohorts.csv"),
  jsonFolder = here::here("inst/testdata/matching/cohorts"),
  sqlFolder = here::here("inst/testdata/matching/sql/sql_server"),
  cohortFileNameFormat = "%s",
  cohortFileNameValue = c("cohortId"),
  #packageName = "HadesExtras",
  verbose = FALSE
)

```

# Create a matching subset 

```{r}
# Match to sex and bday, match ratio 10
  subsetDef <- CohortGenerator::createCohortSubsetDefinition(
    name = "",
    definitionId = 20,
    subsetOperators = list(
      createMatchingSubset(
        matchToCohortId = 10,
        matchRatio = 10,
        matchSex = TRUE,
        matchBirthYear = TRUE,
        matchCohortStartDateWithInDuration = FALSE,
        newCohortStartDate = "keep",
        newCohortEndDate = "keep"
      )
    )
  )
```

```{r}

cohortDefinitionSetWithSubsetDef <- cohortDefinitionSet |>
  CohortGenerator::addCohortSubsetDefinition(subsetDef, targetCohortIds = 20)

cohortDefinitionSetWithSubsetDef |>  tibble::as_tibble() |> dplyr::select(-sql, -json)
```


Build cohorts 
```{r}
cohortTableHandler$insertOrUpdateCohorts(cohortDefinitionSetWithSubsetDef )
```

```{r}
cohortsSummary <- cohortTableHandler$getCohortsSummary()
```

```{r}
rectable_cohortsSummary(cohortsSummary)
```



